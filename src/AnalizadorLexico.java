/* Generated By:JavaCC: Do not edit this line. AnalizadorLexico.java */
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

public class AnalizadorLexico implements AnalizadorLexicoConstants {
  static int numero = 0;

  static String nombreArchivo = "asd";

  static String texto = "";

  private static void grabarLexema(int n, String token, String lexema, int nL, int nC)
  {
    System.out.println(n + "- Token: " + token + ", Lexema:" + lexema + ", Linea: " + nL + ", Columna:" + nC);
  }

  private static void grabarDatosPieza(int n, String token, Token pieza)
  {
    grabarLexema(n, token, pieza.image, pieza.beginLine, pieza.beginColumn);
  }

  public static void main(String args []) throws ParseException, IOException
  {
    try
    {
      /*---------------------------------------------------*/
      String aux = "";
      /**llamamos el metodo que permite cargar la ventana*/
      JFileChooser file = new JFileChooser();
      file.showOpenDialog(null);
      /**abrimos el archivo seleccionado*/
      File abre = file.getSelectedFile();
      /**recorremos el archivo, lo leemos para plasmarlo en el area de texto*/
      if (abre != null)
      {
        FileReader archivos = new FileReader(abre);
        BufferedReader lee = new BufferedReader(archivos);
        while ((aux = lee.readLine()) != null)
        {
          texto += aux + "\u005cn";
        }
        lee.close();
      }

      System.out.println("---------- INICIANDO AN\u00c1LISIS L\u00c9XICO PARA EL ARCHIVO " + nombreArchivo + " ----------");
      System.out.println("Ingrese el c\u00f3digo a analizar:");
      AnalizadorLexico parser = new AnalizadorLexico(System.in);
      parser.TokenList();

      System.out.println("Analisis terminado:");
      System.out.println("no se han hallado errores l\u00e9xicos");
    }
    catch (TokenMgrError te)
    {
      System.err.println("Se han encontrado errores lexicos.");
      System.err.println(te.getMessage());
    }
    catch (ParseException e)
    {
      System.err.println("Analizador: Se han encontrado errores en el analisis.");
      System.err.println(e.getMessage());
    }
    catch (IOException ex)
    {
      System.err.println("Cargar: El archivo no se ha podido cargar.");
      System.err.println(ex.getMessage());
    }
  }

/**
 * Reconoce el contenido completo de un archivo
 *
 * TokenList -> (TokenElement)* 
 */
  static final public void TokenList() throws ParseException {
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PAGINA:
      case TITULO:
      case CONTENEDOR:
      case FORMULARIO:
      case CAMPOTEXTO:
      case SELECTOR:
      case BOTON:
      case ID:
      case ESTILO:
      case FONDO:
      case COLOR:
      case FUENTE:
      case TAMFUENTE:
      case TEXTO:
      case MUESTRA:
      case VALOR:
      case CANTIDAD:
      case VALORINTERNO:
      case VALOREXTERNO:
      case SELECCIONADO:
      case INICIO:
      case FIN:
      case TAMPX:
      case SOLID:
      case NUMCOLOR:
      case IDENTIFICADOR:
      case ASIGNACIONPUNTO:
      case ASIGNACIONGUION:
      case CONCATENACION:
      case FINLINEA:
      case CADENA:
      case NOMBREARCHIVO:
      case COMENTARIO:
      case NEGRILLA:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      TokenElement();
    }
  }

  static final public void TokenElement() throws ParseException {
  Token pieza;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PAGINA:
      pieza = jj_consume_token(PAGINA);
    numero++;
    grabarDatosPieza(numero, "PAGINA", pieza);
      break;
    case TITULO:
      pieza = jj_consume_token(TITULO);
    numero++;
    grabarDatosPieza(numero, "TITULO", pieza);
      break;
    case CONTENEDOR:
      pieza = jj_consume_token(CONTENEDOR);
    numero++;
    grabarDatosPieza(numero, "CONTENEDOR", pieza);
      break;
    case FORMULARIO:
      pieza = jj_consume_token(FORMULARIO);
    numero++;
    grabarDatosPieza(numero, "FORMULARIO", pieza);
      break;
    case CAMPOTEXTO:
      pieza = jj_consume_token(CAMPOTEXTO);
    numero++;
    grabarDatosPieza(numero, "CAMPO TEXTO", pieza);
      break;
    case SELECTOR:
      pieza = jj_consume_token(SELECTOR);
    numero++;
    grabarDatosPieza(numero, "SELECTOR", pieza);
      break;
    case BOTON:
      pieza = jj_consume_token(BOTON);
    numero++;
    grabarDatosPieza(numero, "BOTON", pieza);
      break;
    case ID:
      pieza = jj_consume_token(ID);
    numero++;
    grabarDatosPieza(numero, "ID", pieza);
      break;
    case ESTILO:
      pieza = jj_consume_token(ESTILO);
    numero++;
    grabarDatosPieza(numero, "ESTILO", pieza);
      break;
    case FONDO:
      pieza = jj_consume_token(FONDO);
    numero++;
    grabarDatosPieza(numero, "FONDO", pieza);
      break;
    case COLOR:
      pieza = jj_consume_token(COLOR);
    numero++;
    grabarDatosPieza(numero, "COLOR", pieza);
      break;
    case FUENTE:
      pieza = jj_consume_token(FUENTE);
    numero++;
    grabarDatosPieza(numero, "FUENTE", pieza);
      break;
    case TAMFUENTE:
      pieza = jj_consume_token(TAMFUENTE);
    numero++;
    grabarDatosPieza(numero, "TAM. FUENTE", pieza);
      break;
    case TEXTO:
      pieza = jj_consume_token(TEXTO);
    numero++;
    grabarDatosPieza(numero, "TEXTO", pieza);
      break;
    case MUESTRA:
      pieza = jj_consume_token(MUESTRA);
    numero++;
    grabarDatosPieza(numero, "MUESTRA", pieza);
      break;
    case VALOR:
      pieza = jj_consume_token(VALOR);
    numero++;
    grabarDatosPieza(numero, "VALOR", pieza);
      break;
    case CANTIDAD:
      pieza = jj_consume_token(CANTIDAD);
    numero++;
    grabarDatosPieza(numero, "CANTIDAD", pieza);
      break;
    case VALORINTERNO:
      pieza = jj_consume_token(VALORINTERNO);
    numero++;
    grabarDatosPieza(numero, "VALOR INTERNO", pieza);
      break;
    case VALOREXTERNO:
      pieza = jj_consume_token(VALOREXTERNO);
    numero++;
    grabarDatosPieza(numero, "VALOR EXTERNO", pieza);
      break;
    case SELECCIONADO:
      pieza = jj_consume_token(SELECCIONADO);
    numero++;
    grabarDatosPieza(numero, "SELECCIONADO", pieza);
      break;
    case TAMPX:
      pieza = jj_consume_token(TAMPX);
    numero++;
    grabarDatosPieza(numero, "TAM. PX", pieza);
      break;
    case SOLID:
      pieza = jj_consume_token(SOLID);
    numero++;
    grabarDatosPieza(numero, "SOLID", pieza);
      break;
    case NUMCOLOR:
      pieza = jj_consume_token(NUMCOLOR);
    numero++;
    grabarDatosPieza(numero, "ESP. COLOR", pieza);
      break;
    case INICIO:
      pieza = jj_consume_token(INICIO);
    numero++;
    grabarDatosPieza(numero, "INICIO", pieza);
      break;
    case FIN:
      pieza = jj_consume_token(FIN);
    numero++;
    grabarDatosPieza(numero, "FIN", pieza);
      break;
    case IDENTIFICADOR:
      pieza = jj_consume_token(IDENTIFICADOR);
    numero++;
    grabarDatosPieza(numero, "IDENTIFICADOR", pieza);
      break;
    case ASIGNACIONPUNTO:
      pieza = jj_consume_token(ASIGNACIONPUNTO);
    numero++;
    grabarDatosPieza(numero, "ASIGNACION . ", pieza);
      break;
    case ASIGNACIONGUION:
      pieza = jj_consume_token(ASIGNACIONGUION);
    numero++;
    grabarDatosPieza(numero, "ASIGNACION -> ", pieza);
      break;
    case CONCATENACION:
      pieza = jj_consume_token(CONCATENACION);
    numero++;
    grabarDatosPieza(numero, "CONCATENACION", pieza);
      break;
    case FINLINEA:
      pieza = jj_consume_token(FINLINEA);
    numero++;
    grabarDatosPieza(numero, "FIN DE LINEA", pieza);
      break;
    case NOMBREARCHIVO:
      pieza = jj_consume_token(NOMBREARCHIVO);
    numero++;
    grabarDatosPieza(numero, "NOMBRE ARCHIVO", pieza);
      break;
    case CADENA:
      pieza = jj_consume_token(CADENA);
    numero++;
    grabarDatosPieza(numero, "CADENA", pieza);
      break;
    case COMENTARIO:
      pieza = jj_consume_token(COMENTARIO);
    numero++;
    grabarDatosPieza(numero, "COMENTARIO", pieza);
      break;
    case NEGRILLA:
      pieza = jj_consume_token(NEGRILLA);
    numero++;
    grabarDatosPieza(numero, "NEGRILLA", pieza);
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public AnalizadorLexicoTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[2];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x7fffffc0,0x7fffffc0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x7fc,0x7fc,};
   }

  /** Constructor with InputStream. */
  public AnalizadorLexico(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public AnalizadorLexico(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new AnalizadorLexicoTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public AnalizadorLexico(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new AnalizadorLexicoTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public AnalizadorLexico(AnalizadorLexicoTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(AnalizadorLexicoTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[43];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 2; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 43; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}

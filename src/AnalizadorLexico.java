/* Generated By:JavaCC: Do not edit this line. AnalizadorLexico.java */
import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.nio.charset.StandardCharsets;
import javax.swing.JOptionPane;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;

public class AnalizadorLexico implements AnalizadorLexicoConstants {
  static int numero = 0;

  private static void grabarLexema(int n, String token, String lexema, int nL, int nC)
  {
    System.out.println(n + "-\u005ct Token: " + token + ",\u005ct Lexema:" + lexema + ",\u005ct Linea: " + nL + ",\u005ct Columna:" + nC);
  }

  private static void grabarDatosPieza(int n, String token, Token pieza)
  {
    grabarLexema(n, token, pieza.image, pieza.beginLine, pieza.beginColumn);
  }

  /**
	* Metodo para leer el codigo desde la consola
	*/
  private static void leerConsola() throws ParseException
  {
    System.out.println("---------- INICIANDO AN\u00c1LISIS L\u00c9XICO ----------");
    System.out.println("Ingrese el c\u00f3digo a analizar:");
    AnalizadorLexico parser = new AnalizadorLexico(System.in);
//    parser.TokenList();
        parser.Programa();
    System.out.println("Analisis terminado:");
    System.out.println("no se han hallado errores l\u00e9xicos");
  }

  /**
	* Metodo para leer el codigo desde un archivo
	*/
  private static void leerArchivo() throws IOException, ParseException
  {
    /**llamamos el metodo que permite cargar la ventana*/
    JFileChooser file = new JFileChooser();
    FileNameExtensionFilter filtro = new FileNameExtensionFilter("SHTML", "shtml");
    file.setFileFilter(filtro);
    file.showOpenDialog(null);
    /**abrimos el archivo seleccionado*/
    File abre = file.getSelectedFile();
    String nombreArchivo = "";
    String texto = "";
    String aux = "";
    /**recorremos el archivo, lo leemos para plasmarlo en el area de texto*/
    if (abre != null)
    {
      nombreArchivo = abre.getName();
      FileReader archivos = new FileReader(abre);
      BufferedReader lee = new BufferedReader(archivos);
      while ((aux = lee.readLine()) != null)
      {
        texto += aux + "\u005cn";
      }
      lee.close();
    }
    InputStream stream = new ByteArrayInputStream(texto.getBytes(StandardCharsets.UTF_8));
    System.out.println("---------- INICIANDO AN\u00c1LISIS L\u00c9XICO PARA EL ARCHIVO " + nombreArchivo + " ----------");
    System.out.println("Ingrese el c\u00f3digo a analizar:");
    AnalizadorLexico parser = new AnalizadorLexico(stream);
//    parser.TokenList();
        parser.Programa();
    System.out.println("Analisis terminado:");
    System.out.println("no se han hallado errores l\u00e9xicos");
  }

  /**
	* Metodo principal
	*/
  public static void main(String args []) throws ParseException, IOException
  {
    try
    {
      Object [] botones =
      {
        "Salir", "Por Consola", "Seleccionar un archivo .shtml"
      }
      ;
      Object [] mensajes =
      {
        "Bienvenido", "Como deseas analizar el codigo fuente?"
      }
      ;
      int variable = JOptionPane.showOptionDialog(null, mensajes,
      "Analizador Lexico", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE,
      null, botones, botones [2]);
      switch (variable)
      {
        case 0 | - 1 : System.exit(0);
        break;
        case 1 : leerConsola();
        break;
        case 2 : leerArchivo();
        break;
      }
    }
    catch (TokenMgrError te)
    {
      System.err.println("Se han encontrado errores lexicos.");
      System.err.println(te.getMessage());
    }
    catch (ParseException e)
    {
      System.err.println("Analizador: Se han encontrado errores en el analisis.");
      System.err.println(e.getMessage());
    }
    catch (IOException ex)
    {
      System.err.println("Cargar: El archivo no se ha podido cargar.");
      System.err.println(ex.getMessage());
    }
  }

// ------------------------------------------------------------
// -- ANALIZADOR LEXICO ---------------------------------------
// ------------------------------------------------------------
  static final public void Programa() throws ParseException {
    NombrePagina();
    TituloPagina();
    CuerpoPrograma();
    jj_consume_token(0);
  }

  static final public void NombrePagina() throws ParseException {
    jj_consume_token(PAGINA);
    jj_consume_token(NOMBREVARIABLE);
    jj_consume_token(SEMIC);
  }

  static final public void TituloPagina() throws ParseException {
    jj_consume_token(TITULO);
    jj_consume_token(ASIGNACION);
    jj_consume_token(CADENA);
    jj_consume_token(SEMIC);
  }

  static final public void CuerpoPrograma() throws ParseException {
    jj_consume_token(INICIO);
    ListadoSentencias();
    jj_consume_token(FIN);
  }

  static final public void ListadoSentencias() throws ParseException {
    Sentencia();
    jj_consume_token(SEMIC);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CONTENEDOR:
    case FORMULARIO:
    case CAMPOTEXTO:
    case SELECTOR:
    case BOTON:
    case NOMBREVARIABLE:
      ListadoSentencias();
      break;
    default:
      jj_la1[0] = jj_gen;
      ;
    }
  }

  static final public void Sentencia() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CONTENEDOR:
    case FORMULARIO:
    case CAMPOTEXTO:
    case SELECTOR:
    case BOTON:
      Declaracion();
      break;
    case NOMBREVARIABLE:
      Asignacion();
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void Declaracion() throws ParseException {
    TipoDato();
    Identificador();
  }

  static final public void TipoDato() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CONTENEDOR:
      jj_consume_token(CONTENEDOR);
      break;
    case FORMULARIO:
      jj_consume_token(FORMULARIO);
      break;
    case SELECTOR:
      jj_consume_token(SELECTOR);
      break;
    case CAMPOTEXTO:
      jj_consume_token(CAMPOTEXTO);
      break;
    case BOTON:
      jj_consume_token(BOTON);
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void Asignacion() throws ParseException {
    Identificador();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LLAMADOMET:
      jj_consume_token(LLAMADOMET);
      Atributo();
      break;
    default:
      jj_la1[3] = jj_gen;
      ;
    }
    jj_consume_token(ASIGNACION);
    Expresion();
  }

  static final public void Atributo() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ESTILO:
      jj_consume_token(ESTILO);
      jj_consume_token(ASIGNACION);
      AtributoInterno();
      break;
    case ID:
      jj_consume_token(ID);
      break;
    case MUESTRA:
      jj_consume_token(MUESTRA);
      break;
    case VALOR:
      jj_consume_token(VALOR);
      break;
    case VALORINTERNO:
      jj_consume_token(VALORINTERNO);
      break;
    case VALOREXTERNO:
      jj_consume_token(VALOREXTERNO);
      break;
    case CANTIDAD:
      jj_consume_token(CANTIDAD);
      break;
    case SELECCIONADO:
      jj_consume_token(SELECCIONADO);
      break;
    case TEXTO:
      jj_consume_token(TEXTO);
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void AtributoInterno() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FONDO:
      jj_consume_token(FONDO);
      break;
    case COLOR:
      jj_consume_token(COLOR);
      break;
    case BORDE:
      jj_consume_token(BORDE);
      break;
    case TAMFUENTE:
      jj_consume_token(TAMFUENTE);
      break;
    case FUENTE:
      jj_consume_token(FUENTE);
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void Expresion() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case HEXCOLOR:
      jj_consume_token(HEXCOLOR);
      break;
    case BORDE:
      jj_consume_token(BORDE);
      break;
    case CADENA:
      jj_consume_token(CADENA);
      break;
    case FUENTE:
      jj_consume_token(FUENTE);
      break;
    case TAMFUENTE:
      jj_consume_token(TAMFUENTE);
      break;
    case CONCATENACION:
      jj_consume_token(CONCATENACION);
      break;
    case NUMERO:
      jj_consume_token(NUMERO);
      break;
      ArregloTipo1();
      break;
    case NOMBREVARIABLE:
      ArregloTipo2();
      break;
      jj_consume_token(NOMBREVARIABLE);
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void ArregloTipo1() throws ParseException {
    jj_consume_token(CADENA);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DIVITEM:
      jj_consume_token(DIVITEM);
      ArregloTipo1();
      break;
    default:
      jj_la1[7] = jj_gen;
      ;
    }
  }

  static final public void ArregloTipo2() throws ParseException {
    jj_consume_token(NOMBREVARIABLE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DIVITEM:
      jj_consume_token(DIVITEM);
      ArregloTipo2();
      break;
    default:
      jj_la1[8] = jj_gen;
      ;
    }
  }

  static final public void Identificador() throws ParseException {
    jj_consume_token(NOMBREVARIABLE);
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public AnalizadorLexicoTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[9];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x3e00,0x3e00,0x3e00,0x0,0xfe0c000,0x1f0000,0x1c0000,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x800,0x800,0x0,0x80,0x0,0x0,0x1845,0x100,0x100,};
   }

  /** Constructor with InputStream. */
  public AnalizadorLexico(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public AnalizadorLexico(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new AnalizadorLexicoTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public AnalizadorLexico(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new AnalizadorLexicoTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public AnalizadorLexico(AnalizadorLexicoTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(AnalizadorLexicoTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[46];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 9; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 46; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}

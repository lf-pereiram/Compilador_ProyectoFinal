/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */
options
{
  static = true;
}

PARSER_BEGIN(AnalizadorLexico)
import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.nio.charset.StandardCharsets;
import javax.swing.JOptionPane;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;

public class AnalizadorLexico
{
  static int numero = 0;

  private static void grabarLexema(int n, String token, String lexema, int nL, int nC)
  {
    System.out.println(n + "- Token: " + token + ", Lexema:" + lexema + ", Linea: " + nL + ", Columna:" + nC);
  }

  private static void grabarDatosPieza(int n, String token, Token pieza)
  {
    grabarLexema(n, token, pieza.image, pieza.beginLine, pieza.beginColumn);
  }

  /**
	* Metodo para leer el codigo desde la consola
	*/
  private static void leerConsola() throws ParseException
  {
    System.out.println("---------- INICIANDO AN\u00c1LISIS L\u00c9XICO ----------");
    System.out.println("Ingrese el c\u00f3digo a analizar:");
    AnalizadorLexico parser = new AnalizadorLexico(System.in);
    parser.TokenList();
    System.out.println("Analisis terminado:");
    System.out.println("no se han hallado errores l\u00e9xicos");
  }

  /**
	* Metodo para leer el codigo desde un archivo
	*/
  private static void leerArchivo() throws IOException, ParseException
  {
    /**llamamos el metodo que permite cargar la ventana*/
    JFileChooser file = new JFileChooser();
    FileNameExtensionFilter filtro = new FileNameExtensionFilter("SHTML", "shtml");
    file.setFileFilter(filtro);
    file.showOpenDialog(null);
    /**abrimos el archivo seleccionado*/
    File abre = file.getSelectedFile();
    String nombreArchivo = "";
    String texto = "";
    String aux = "";
    /**recorremos el archivo, lo leemos para plasmarlo en el area de texto*/
    if (abre != null)
    {
      nombreArchivo = abre.getName();
      FileReader archivos = new FileReader(abre);
      BufferedReader lee = new BufferedReader(archivos);
      while ((aux = lee.readLine()) != null)
      {
        texto += aux + "\n";
      }
      lee.close();
    }
    InputStream stream = new ByteArrayInputStream(texto.getBytes(StandardCharsets.UTF_8));
    System.out.println("---------- INICIANDO AN\u00c1LISIS L\u00c9XICO PARA EL ARCHIVO " + nombreArchivo + " ----------");
    System.out.println("Ingrese el c\u00f3digo a analizar:");
    AnalizadorLexico parser = new AnalizadorLexico(stream);
    parser.TokenList();
    System.out.println("Analisis terminado:");
    System.out.println("no se han hallado errores l\u00e9xicos");
  }

  /**
	* Metodo principal
	*/
  public static void main(String args []) throws ParseException, IOException
  {
    try
    {
      Object [] botones =
      {
        "Salir", "Por Consola", "Seleccionar un archivo .shtml"
      }
      ;
      Object [] mensajes =
      {
        "Bienvenido", "Como deseas analizar el codigo fuente?"
      }
      ;
      int variable = JOptionPane.showOptionDialog(null, mensajes, 
      "Analizador Lexico", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, 
      null, botones, botones [2]);
      switch (variable)
      {
        case 0 | - 1 : System.exit(0);
        break;
        case 1 : leerConsola();
        break;
        case 2 : leerArchivo();
        break;
      }
    }
    catch (TokenMgrError te)
    {
      System.err.println("Se han encontrado errores lexicos.");
      System.err.println(te.getMessage());
    }
    catch (ParseException e)
    {
      System.err.println("Analizador: Se han encontrado errores en el analisis.");
      System.err.println(e.getMessage());	
    }
    catch (IOException ex)
    {
      System.err.println("Cargar: El archivo no se ha podido cargar.");
      System.err.println(ex.getMessage());
    }
  }
}

PARSER_END(AnalizadorLexico)

/* Espacio en blanco, saltos de linea, tabulares */
SKIP :
{
  " "
| < "<" (~[ ">" ])* ">" > //Esto es para saltar los comentarios
| "\t"
| "\n"
| "\r"
| "\f"
| ";"
}

TOKEN : /*Pagina*/
{
  < PAGINA : "Pagina" >
}

TOKEN : /*Titulo*/
{
  < TITULO : "Titulo" >
}

TOKEN : /*Contenedor*/
{
  < CONTENEDOR : "Contenedor" >
}

TOKEN : /*Formulario*/
{
  < FORMULARIO : "Formulario" >
}

TOKEN : /*Campo de Texto*/
{
  < CAMPOTEXTO : "CampoTexto" >
}

TOKEN : /*Selector*/
{
  < SELECTOR : "Selector" >
}

TOKEN : /*Boton*/
{
  < BOTON : "Boton" >
}

TOKEN : /*ID*/
{
  < ID : "id" >
}

TOKEN : /*Estilo*/
{
  < ESTILO : "estilo" >
}

TOKEN : /*Fondo*/
{
  < FONDO : "fondo" >
}

TOKEN : /*Color*/
{
  < COLOR : "color" >
}

TOKEN : /*Borde*/
{
  < BORDE : "borde" >
}

TOKEN : /*Fuente*/
{
  < FUENTE : "fuente" >
}

TOKEN : /*Tamaño de Fuente*/
{
  < TAMFUENTE : "tamFuente" >
}

TOKEN : /*Texto*/
{
  < TEXTO : "texto" >
}

TOKEN : /*Muestra*/
{
  < MUESTRA : "muestra" >
}

TOKEN : /*Valor*/
{
  < VALOR : "valor" >
}

TOKEN : /*Cantidad*/
{
  < CANTIDAD : "cantidad" >
}

TOKEN : /*Valor Interno*/
{
  < VALORINTERNO : "valorInterno" >
}

TOKEN : /*Valor Externo*/
{
  < VALOREXTERNO : "valorExterno" >
}

TOKEN : /*Seleccion*/
{
  < SELECCIONADO : "seleccionado" >
}

TOKEN : /*Inicio*/
{
  < INICIO : "-INICIO-" >
}

TOKEN : /*Fin*/
{
  < FIN : "-FIN-" >
}

TOKEN : /*TamanoFuente*/
{
  < TAMPX : (< DIGIT >)+ ("px") >
}

TOKEN : /*Solid*/
{
  < SOLID : "solid" >
}

TOKEN : /*HexColor*/
{
  < NUMCOLOR : "#" (< NCOL >) (< NCOL >) (< NCOL >) (< NCOL >) (< NCOL >) (< NCOL >) >
| < #NCOL : [ "0"-"9", "a"-"f", "A"-"F" ] >
}

TOKEN : /*NUMEROS EJEMPLO 1, 1234, 987*/
{
  < NUMERO : (< DIGIT >)+ >
| < #DIGIT : [ "0"-"9" ] >
}

TOKEN : /*IDENTIFICADORES EJEMPLO a, casa, clase1*/
{
  < IDENTIFICADOR : "_" ([ "a"-"z" ]) ([ "a"-"z", "A"-"Z", "0"-"9", "_" ])* >
}

TOKEN : /*OPERADOR RELACIONAL*/
{
  < ASIGNACIONGUION : ("-") (">") >
| < CONCATENACION 	: "+" >
| < LLAMADOMET 		: "." >
}

TOKEN : /*Division de items en una lista*/
{
  < DIVITEM 	: ":" >
}

TOKEN : /*Negrilla*/
{
  < ININEGRILLA : 	"(" >
| < FINNEGRILLA : 	")" >
}

TOKEN : /*Nombre de Archivo*/
{
  < NOMBREARCHIVO : ([ "a"-"z", "A"-"Z" ]) ([ "a"-"z", "A"-"Z", "0"-"9", "_" ])* >
}

TOKEN : /*Cadena*/
{
  < CADENA : ("\"") (~[ "\"" ])* ("\"") >
}

/**
 * Reconoce el contenido completo de un archivo
 *
 * TokenList -> (TokenElement)* 
 */
void TokenList() :
{}
{
  (
    TokenElement()
  )*
}

void TokenElement() :
{
  Token pieza;
}
{
  pieza = < PAGINA >
  {
    numero++;
    grabarDatosPieza(numero, "PAGINA", pieza);
  }
| pieza = < TITULO >
  {
    numero++;
    grabarDatosPieza(numero, "TITULO", pieza);
  }
| pieza = < CONTENEDOR >
  {
    numero++;
    grabarDatosPieza(numero, "CONTENEDOR", pieza);
  }
| pieza = < FORMULARIO >
  {
    numero++;
    grabarDatosPieza(numero, "FORMULARIO", pieza);
  }
| pieza = < CAMPOTEXTO >
  {
    numero++;
    grabarDatosPieza(numero, "CAMPO TEXTO", pieza);
  }
| pieza = < SELECTOR >
  {
    numero++;
    grabarDatosPieza(numero, "SELECTOR", pieza);
  }
| pieza = < BOTON >
  {
    numero++;
    grabarDatosPieza(numero, "BOTON", pieza);
  }
| pieza = < ID >
  {
    numero++;
    grabarDatosPieza(numero, "ID", pieza);
  }
| pieza = < TAMPX >
  {
    numero++;
    grabarDatosPieza(numero, "TAMAÑO FUENTE", pieza);
  }
| pieza = < ESTILO >
  {
    numero++;
    grabarDatosPieza(numero, "ESTILO", pieza);
  }
| pieza = < FONDO >
  {
    numero++;
    grabarDatosPieza(numero, "FONDO", pieza);
  }
| pieza = < COLOR >
  {
    numero++;
    grabarDatosPieza(numero, "COLOR", pieza);
  }
| pieza = < BORDE >
  {
    numero++;
    grabarDatosPieza(numero, "BORDE", pieza);
  }
| pieza = < NUMCOLOR >
  {
    numero++;
    grabarDatosPieza(numero, "COLOR HEXADECIMAL", pieza);
  }
| pieza = < FUENTE >
  {
    numero++;
    grabarDatosPieza(numero, "FUENTE", pieza);
  }
| pieza = < TAMFUENTE >
  {
    numero++;
    grabarDatosPieza(numero, "TAM. FUENTE", pieza);
  }
| pieza = < TEXTO >
  {
    numero++;
    grabarDatosPieza(numero, "TEXTO", pieza);
  }
| pieza = < MUESTRA >
  {
    numero++;
    grabarDatosPieza(numero, "MUESTRA", pieza);
  }
| pieza = < VALOR >
  {
    numero++;
    grabarDatosPieza(numero, "VALOR", pieza);
  }
| pieza = < CANTIDAD >
  {
    numero++;
    grabarDatosPieza(numero, "CANTIDAD", pieza);
  }
| pieza = < VALORINTERNO >
  {
    numero++;
    grabarDatosPieza(numero, "VALOR INTERNO", pieza);
  }
| pieza = < VALOREXTERNO >
  {
    numero++;
    grabarDatosPieza(numero, "VALOR EXTERNO", pieza);
  }
| pieza = < SELECCIONADO >
  {
    numero++;
    grabarDatosPieza(numero, "SELECCIONADO", pieza);
  }
| pieza = < SOLID >
  {
    numero++;
    grabarDatosPieza(numero, "SOLID", pieza);
  }
| pieza = < INICIO >
  {
    numero++;
    grabarDatosPieza(numero, "INICIO", pieza);
  }
| pieza = < FIN >
  {
    numero++;
    grabarDatosPieza(numero, "FIN", pieza);
  }
| pieza = < IDENTIFICADOR >
  {
    numero++;
    grabarDatosPieza(numero, "IDENTIFICADOR", pieza);
  }
| pieza = < ASIGNACIONGUION >
  {
    numero++;
    grabarDatosPieza(numero, "ASIGNACION ->", pieza);
  }
| pieza = < LLAMADOMET >
  {
    numero++;
    grabarDatosPieza(numero, "LLAMADO METODO", pieza);
  }
| pieza = < CONCATENACION >
  {
    numero++;
    grabarDatosPieza(numero, "CONCATENACION", pieza);
  }
| pieza = < NOMBREARCHIVO >
  {
    numero++;
    grabarDatosPieza(numero, "NOMBRE ARCHIVO", pieza);
  }
| pieza = < CADENA >
  {
    numero++;
    grabarDatosPieza(numero, "CADENA", pieza);
  }
| pieza = < NUMERO >
  {
    numero++;
    grabarDatosPieza(numero, "NUMERO", pieza);
  }
| pieza = < ININEGRILLA >
  {
    numero++;
    grabarDatosPieza(numero, "ABRIR NEGRILLA", pieza);
  }
| pieza = < FINNEGRILLA >
  {
    numero++;
    grabarDatosPieza(numero, "CERRAR NEGRILLA", pieza);
  }
| pieza = < DIVITEM >
  {
    numero++;
    grabarDatosPieza(numero, "DIVISOR DE ITEMS", pieza);
  }
}

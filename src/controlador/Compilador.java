/* Generated By:JJTree&JavaCC: Do not edit this line. Compilador.java */
package controlador;

import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;

public class Compilador/*@bgen(jjtree)*/implements CompiladorTreeConstants, CompiladorConstants {/*@bgen(jjtree)*/
  protected static JJTCompiladorState jjtree = new JJTCompiladorState();private static ArrayList < String > listaSimbolos;
  static int numero = 0;

  public Compilador()
  {
    listaSimbolos = new ArrayList < String > ();
  }

  public ArrayList < String > getListaSimbolos()
  {
    return listaSimbolos;
  }

  private static void grabarLexema(int n, String token, String lexema, int nL, int nC)
  {
    String simbolo = "";
    simbolo = token + ";" + lexema;
    listaSimbolos.add(simbolo);
    System.out.println(n + "-\u005ct Token: " + token + ",\u005ct Lexema:" + lexema + ",\u005ct Linea: " + nL + ",\u005ct Columna:" + nC);
  }

  private static void grabarDatosPieza(int n, String token, Token pieza)
  {
    grabarLexema(n, token, pieza.image, pieza.beginLine, pieza.beginColumn);
  }

  /**
	* Metodo para leer el codigo desde la consola
	*/
  private static void leerConsola() throws ParseException
  {
    System.out.println("---------- INICIANDO AN\u00c1LISIS L\u00c9XICO ----------");
    System.out.println("Ingrese el c\u00f3digo a analizar:");
    Compilador parser = new Compilador(System.in);
    //    parser.TokenList();
    parser.Programa();
    System.out.println("Analisis terminado:");
    System.out.println("no se han hallado errores l\u00e9xicos");
  }

  /**
	* Metodo para leer el codigo desde un archivo
	*/
  private static void leerArchivo() throws IOException, ParseException
  {
    /**llamamos el metodo que permite cargar la ventana*/
    JFileChooser file = new JFileChooser();
    FileNameExtensionFilter filtro = new FileNameExtensionFilter("SHTML", "shtml");
    file.setFileFilter(filtro);
    file.showOpenDialog(null);
    /**abrimos el archivo seleccionado*/
    File abre = file.getSelectedFile();
    String nombreArchivo = "";
    String texto = "";
    String aux = "";
    /**recorremos el archivo, lo leemos para plasmarlo en el area de texto*/
    if (abre != null)
    {
      nombreArchivo = abre.getName();
      FileReader archivos = new FileReader(abre);
      BufferedReader lee = new BufferedReader(archivos);
      while ((aux = lee.readLine()) != null)
      {
        texto += aux + "\u005cn";
      }
      lee.close();
    }
    InputStream stream = new ByteArrayInputStream(texto.getBytes(StandardCharsets.UTF_8));
    System.out.println("---------- INICIANDO AN\u00c1LISIS L\u00c9XICO PARA EL ARCHIVO " + nombreArchivo + " ----------");
    System.out.println("Ingrese el c\u00f3digo a analizar:");
    Compilador parser = new Compilador(stream);
    //    parser.TokenList();
    parser.Programa();
    System.out.println("Analisis terminado:");
    System.out.println("no se han hallado errores l\u00e9xicos");
  }

  /**
	* Metodo principal
	*/
  public static void main(String args []) throws ParseException, IOException
  {
    try
    {
      Object [] botones =
      {
        "Salir", "Por Consola", "Seleccionar un archivo .shtml"
      }
      ;
      Object [] mensajes =
      {
        "Bienvenido", "Como deseas analizar el codigo fuente?"
      }
      ;
      int variable = JOptionPane.showOptionDialog(null, mensajes,
      "Analizador Lexico", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE,
      null, botones, botones [2]);
      switch (variable)
      {
        case 0 | - 1 : System.exit(0);
        break;
        case 1 : leerConsola();
        break;
        case 2 : leerArchivo();
        break;
      }
    }
    catch (TokenMgrError te)
    {
      System.err.println("Se han encontrado errores lexicos.");
      System.err.println(te.getMessage());
    }
    catch (ParseException e)
    {
      System.err.println("Analizador: Se han encontrado errores en el analisis.");
      System.err.println(e.getMessage());
    }
    catch (IOException ex)
    {
      System.err.println("Cargar: El archivo no se ha podido cargar.");
      System.err.println(ex.getMessage());
    }
  }

// ------------------------------------------------------------
// -- ANALIZADOR SINTACTICO -----------------------------------
// ------------------------------------------------------------
  static final public SimpleNode Programa() throws ParseException {
                         /*@bgen(jjtree) Programa */
  SimpleNode jjtn000 = new SimpleNode(JJTPROGRAMA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      NombrePagina();
      TituloPagina();
      CuerpoPrograma();
      jj_consume_token(0);
                                                           jjtree.closeNodeScope(jjtn000, true);
                                                           jjtc000 = false;
                                                           {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  static final public void NombrePagina() throws ParseException {
                       /*@bgen(jjtree) NombrePagina */
                        SimpleNode jjtn000 = new SimpleNode(JJTNOMBREPAGINA);
                        boolean jjtc000 = true;
                        jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(PAGINA);
                SimpleNode jjtn001 = new SimpleNode(JJTPAGINA);
                boolean jjtc001 = true;
                jjtree.openNodeScope(jjtn001);
      try {
                jjtree.closeNodeScope(jjtn001,  true);
                jjtc001 = false;
               jjtn001.value = t.image;
      } finally {
                if (jjtc001) {
                  jjtree.closeNodeScope(jjtn001,  true);
                }
      }
      t = jj_consume_token(NOMBREARCHIVO);
                                                                            SimpleNode jjtn002 = new SimpleNode(JJTNOMBREARCHIVO);
                                                                            boolean jjtc002 = true;
                                                                            jjtree.openNodeScope(jjtn002);
      try {
                                                                            jjtree.closeNodeScope(jjtn002,  true);
                                                                            jjtc002 = false;
                                                                           jjtn002.value = t.image;
      } finally {
                                                                            if (jjtc002) {
                                                                              jjtree.closeNodeScope(jjtn002,  true);
                                                                            }
      }
      jj_consume_token(SEMIC);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void TituloPagina() throws ParseException {
                       /*@bgen(jjtree) TituloPagina */
                        SimpleNode jjtn000 = new SimpleNode(JJTTITULOPAGINA);
                        boolean jjtc000 = true;
                        jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(TITULO);
                SimpleNode jjtn001 = new SimpleNode(JJTTITULO);
                boolean jjtc001 = true;
                jjtree.openNodeScope(jjtn001);
      try {
                jjtree.closeNodeScope(jjtn001,  true);
                jjtc001 = false;
               jjtn001.value = t.image;
      } finally {
                if (jjtc001) {
                  jjtree.closeNodeScope(jjtn001,  true);
                }
      }
      jj_consume_token(ASIGNACION);
      t = jj_consume_token(CADENA);
                                                                                    SimpleNode jjtn002 = new SimpleNode(JJTPUNTOYCOMA);
                                                                                    boolean jjtc002 = true;
                                                                                    jjtree.openNodeScope(jjtn002);
      try {
                                                                                    jjtree.closeNodeScope(jjtn002,  true);
                                                                                    jjtc002 = false;
                                                                                   jjtn002.value = t.image;
      } finally {
                                                                                    if (jjtc002) {
                                                                                      jjtree.closeNodeScope(jjtn002,  true);
                                                                                    }
      }
      jj_consume_token(SEMIC);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void CuerpoPrograma() throws ParseException {
                         /*@bgen(jjtree) CuerpoPrograma */
                          SimpleNode jjtn000 = new SimpleNode(JJTCUERPOPROGRAMA);
                          boolean jjtc000 = true;
                          jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(INICIO);
                SimpleNode jjtn001 = new SimpleNode(JJTINICIO);
                boolean jjtc001 = true;
                jjtree.openNodeScope(jjtn001);
      try {
                jjtree.closeNodeScope(jjtn001,  true);
                jjtc001 = false;
               jjtn001.value = t.image;
      } finally {
                if (jjtc001) {
                  jjtree.closeNodeScope(jjtn001,  true);
                }
      }
      ListadoSentencias();
      t = jj_consume_token(FIN);
                                                                                      SimpleNode jjtn002 = new SimpleNode(JJTFIN);
                                                                                      boolean jjtc002 = true;
                                                                                      jjtree.openNodeScope(jjtn002);
      try {
                                                                                      jjtree.closeNodeScope(jjtn002,  true);
                                                                                      jjtc002 = false;
                                                                                     jjtn002.value = t.image;
      } finally {
                                                                                      if (jjtc002) {
                                                                                        jjtree.closeNodeScope(jjtn002,  true);
                                                                                      }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void ListadoSentencias() throws ParseException {
                            /*@bgen(jjtree) ListadoSentencias */
                             SimpleNode jjtn000 = new SimpleNode(JJTLISTADOSENTENCIAS);
                             boolean jjtc000 = true;
                             jjtree.openNodeScope(jjtn000);Token t;
    try {
      Sentencia();
      jj_consume_token(SEMIC);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CONTENEDOR:
      case FORMULARIO:
      case CAMPOTEXTO:
      case SELECTOR:
      case BOTON:
      case IDENTIFICADOR:
        ListadoSentencias();
        break;
      default:
        jj_la1[0] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void Sentencia() throws ParseException {
                    /*@bgen(jjtree) Sentencia */
  SimpleNode jjtn000 = new SimpleNode(JJTSENTENCIA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CONTENEDOR:
      case FORMULARIO:
      case CAMPOTEXTO:
      case SELECTOR:
      case BOTON:
        Declaracion();
        break;
      case IDENTIFICADOR:
        Asignacion();
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void Declaracion() throws ParseException {
                      /*@bgen(jjtree) Declaracion */
                       SimpleNode jjtn000 = new SimpleNode(JJTDECLARACION);
                       boolean jjtc000 = true;
                       jjtree.openNodeScope(jjtn000);Token t;
    try {
      TipoDato();
      t = jj_consume_token(IDENTIFICADOR);
                                  SimpleNode jjtn001 = new SimpleNode(JJTIDENTIFICADOR);
                                  boolean jjtc001 = true;
                                  jjtree.openNodeScope(jjtn001);
      try {
                                  jjtree.closeNodeScope(jjtn001,  true);
                                  jjtc001 = false;
                                 jjtn001.value = t.image;
      } finally {
                                  if (jjtc001) {
                                    jjtree.closeNodeScope(jjtn001,  true);
                                  }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void TipoDato() throws ParseException {
                   /*@bgen(jjtree) TipoDato */
                    SimpleNode jjtn000 = new SimpleNode(JJTTIPODATO);
                    boolean jjtc000 = true;
                    jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CONTENEDOR:
        t = jj_consume_token(CONTENEDOR);
                          SimpleNode jjtn001 = new SimpleNode(JJTCONTENEDOR);
                          boolean jjtc001 = true;
                          jjtree.openNodeScope(jjtn001);
        try {
                          jjtree.closeNodeScope(jjtn001,  true);
                          jjtc001 = false;
                    jjtn001.value = t.image;
        } finally {
                          if (jjtc001) {
                            jjtree.closeNodeScope(jjtn001,  true);
                          }
        }
        break;
      case FORMULARIO:
        t = jj_consume_token(FORMULARIO);
                          SimpleNode jjtn002 = new SimpleNode(JJTFORMULARIO);
                          boolean jjtc002 = true;
                          jjtree.openNodeScope(jjtn002);
        try {
                          jjtree.closeNodeScope(jjtn002,  true);
                          jjtc002 = false;
                    jjtn002.value = t.image;
        } finally {
                          if (jjtc002) {
                            jjtree.closeNodeScope(jjtn002,  true);
                          }
        }
        break;
      case SELECTOR:
        t = jj_consume_token(SELECTOR);
                          SimpleNode jjtn003 = new SimpleNode(JJTSELECTOR);
                          boolean jjtc003 = true;
                          jjtree.openNodeScope(jjtn003);
        try {
                          jjtree.closeNodeScope(jjtn003,  true);
                          jjtc003 = false;
                  jjtn003.value = t.image;
        } finally {
                          if (jjtc003) {
                            jjtree.closeNodeScope(jjtn003,  true);
                          }
        }
        break;
      case CAMPOTEXTO:
        t = jj_consume_token(CAMPOTEXTO);
                          SimpleNode jjtn004 = new SimpleNode(JJTCAMPOTEXTO);
                          boolean jjtc004 = true;
                          jjtree.openNodeScope(jjtn004);
        try {
                          jjtree.closeNodeScope(jjtn004,  true);
                          jjtc004 = false;
                    jjtn004.value = t.image;
        } finally {
                          if (jjtc004) {
                            jjtree.closeNodeScope(jjtn004,  true);
                          }
        }
        break;
      case BOTON:
        t = jj_consume_token(BOTON);
                          SimpleNode jjtn005 = new SimpleNode(JJTBOTON);
                          boolean jjtc005 = true;
                          jjtree.openNodeScope(jjtn005);
        try {
                          jjtree.closeNodeScope(jjtn005,  true);
                          jjtc005 = false;
                 jjtn005.value = t.image;
        } finally {
                          if (jjtc005) {
                            jjtree.closeNodeScope(jjtn005,  true);
                          }
        }
        break;
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void Asignacion() throws ParseException {
                     /*@bgen(jjtree) Asignacion */
                      SimpleNode jjtn000 = new SimpleNode(JJTASIGNACION);
                      boolean jjtc000 = true;
                      jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(IDENTIFICADOR);
                       SimpleNode jjtn001 = new SimpleNode(JJTIDENT);
                       boolean jjtc001 = true;
                       jjtree.openNodeScope(jjtn001);
      try {
                       jjtree.closeNodeScope(jjtn001,  true);
                       jjtc001 = false;
                      jjtn001.value = t.image;
      } finally {
                       if (jjtc001) {
                         jjtree.closeNodeScope(jjtn001,  true);
                       }
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LLAMADOMET:
        t = jj_consume_token(LLAMADOMET);
                                                                                 SimpleNode jjtn002 = new SimpleNode(JJTLLAMMET);
                                                                                 boolean jjtc002 = true;
                                                                                 jjtree.openNodeScope(jjtn002);
        try {
                                                                                 jjtree.closeNodeScope(jjtn002,  true);
                                                                                 jjtc002 = false;
                                                                                jjtn002.value = t.image;
        } finally {
                                                                                 if (jjtc002) {
                                                                                   jjtree.closeNodeScope(jjtn002,  true);
                                                                                 }
        }
        Atributo();
        break;
      default:
        jj_la1[3] = jj_gen;
        ;
      }
      jj_consume_token(ASIGNACION);
      Expresion();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void Atributo() throws ParseException {
                   /*@bgen(jjtree) Atributo */
                    SimpleNode jjtn000 = new SimpleNode(JJTATRIBUTO);
                    boolean jjtc000 = true;
                    jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ESTILO:
        t = jj_consume_token(ESTILO);
                 SimpleNode jjtn001 = new SimpleNode(JJTESTILO);
                 boolean jjtc001 = true;
                 jjtree.openNodeScope(jjtn001);
        try {
                 jjtree.closeNodeScope(jjtn001,  true);
                 jjtc001 = false;
                jjtn001.value = t.image;
        } finally {
                 if (jjtc001) {
                   jjtree.closeNodeScope(jjtn001,  true);
                 }
        }
        jj_consume_token(ASIGNACION);
        AtributoInterno();
        break;
      case ID:
        t = jj_consume_token(ID);
                                  SimpleNode jjtn002 = new SimpleNode(JJTID);
                                  boolean jjtc002 = true;
                                  jjtree.openNodeScope(jjtn002);
        try {
                                  jjtree.closeNodeScope(jjtn002,  true);
                                  jjtc002 = false;
                         jjtn002.value = t.image;
        } finally {
                                  if (jjtc002) {
                                    jjtree.closeNodeScope(jjtn002,  true);
                                  }
        }
        break;
      case MUESTRA:
        t = jj_consume_token(MUESTRA);
                          SimpleNode jjtn003 = new SimpleNode(JJTMUESTRA);
                          boolean jjtc003 = true;
                          jjtree.openNodeScope(jjtn003);
        try {
                          jjtree.closeNodeScope(jjtn003,  true);
                          jjtc003 = false;
                         jjtn003.value = t.image;
        } finally {
                          if (jjtc003) {
                            jjtree.closeNodeScope(jjtn003,  true);
                          }
        }
        break;
      case VALOR:
        t = jj_consume_token(VALOR);
                          SimpleNode jjtn004 = new SimpleNode(JJTVALOR);
                          boolean jjtc004 = true;
                          jjtree.openNodeScope(jjtn004);
        try {
                          jjtree.closeNodeScope(jjtn004,  true);
                          jjtc004 = false;
                 jjtn004.value = t.image;
        } finally {
                          if (jjtc004) {
                            jjtree.closeNodeScope(jjtn004,  true);
                          }
        }
        break;
      case VALORINTERNO:
        t = jj_consume_token(VALORINTERNO);
                      SimpleNode jjtn005 = new SimpleNode(JJTVALORINT);
                      boolean jjtc005 = true;
                      jjtree.openNodeScope(jjtn005);
        try {
                      jjtree.closeNodeScope(jjtn005,  true);
                      jjtc005 = false;
                     jjtn005.value = t.image;
        } finally {
                      if (jjtc005) {
                        jjtree.closeNodeScope(jjtn005,  true);
                      }
        }
        break;
      case VALOREXTERNO:
        t = jj_consume_token(VALOREXTERNO);
                      SimpleNode jjtn006 = new SimpleNode(JJTVALOREXT);
                      boolean jjtc006 = true;
                      jjtree.openNodeScope(jjtn006);
        try {
                      jjtree.closeNodeScope(jjtn006,  true);
                      jjtc006 = false;
                     jjtn006.value = t.image;
        } finally {
                      if (jjtc006) {
                        jjtree.closeNodeScope(jjtn006,  true);
                      }
        }
        break;
      case CANTIDAD:
        t = jj_consume_token(CANTIDAD);
                          SimpleNode jjtn007 = new SimpleNode(JJTCANTIDAD);
                          boolean jjtc007 = true;
                          jjtree.openNodeScope(jjtn007);
        try {
                          jjtree.closeNodeScope(jjtn007,  true);
                          jjtc007 = false;
                  jjtn007.value = t.image;
        } finally {
                          if (jjtc007) {
                            jjtree.closeNodeScope(jjtn007,  true);
                          }
        }
        break;
      case SELECCIONADO:
        t = jj_consume_token(SELECCIONADO);
                      SimpleNode jjtn008 = new SimpleNode(JJTSELECCIONADO);
                      boolean jjtc008 = true;
                      jjtree.openNodeScope(jjtn008);
        try {
                      jjtree.closeNodeScope(jjtn008,  true);
                      jjtc008 = false;
                     jjtn008.value = t.image;
        } finally {
                      if (jjtc008) {
                        jjtree.closeNodeScope(jjtn008,  true);
                      }
        }
        break;
      case TEXTO:
        t = jj_consume_token(TEXTO);
                          SimpleNode jjtn009 = new SimpleNode(JJTTEXTO);
                          boolean jjtc009 = true;
                          jjtree.openNodeScope(jjtn009);
        try {
                          jjtree.closeNodeScope(jjtn009,  true);
                          jjtc009 = false;
                 jjtn009.value = t.image;
        } finally {
                          if (jjtc009) {
                            jjtree.closeNodeScope(jjtn009,  true);
                          }
        }
        break;
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void AtributoInterno() throws ParseException {
                          /*@bgen(jjtree) AtributoInterno */
                           SimpleNode jjtn000 = new SimpleNode(JJTATRIBUTOINTERNO);
                           boolean jjtc000 = true;
                           jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FONDO:
        t = jj_consume_token(FONDO);
                          SimpleNode jjtn001 = new SimpleNode(JJTFONDO);
                          boolean jjtc001 = true;
                          jjtree.openNodeScope(jjtn001);
        try {
                          jjtree.closeNodeScope(jjtn001,  true);
                          jjtc001 = false;
                 jjtn001.value = t.image;
        } finally {
                          if (jjtc001) {
                            jjtree.closeNodeScope(jjtn001,  true);
                          }
        }
        break;
      case COLOR:
        t = jj_consume_token(COLOR);
                          SimpleNode jjtn002 = new SimpleNode(JJTCOLOR);
                          boolean jjtc002 = true;
                          jjtree.openNodeScope(jjtn002);
        try {
                          jjtree.closeNodeScope(jjtn002,  true);
                          jjtc002 = false;
                 jjtn002.value = t.image;
        } finally {
                          if (jjtc002) {
                            jjtree.closeNodeScope(jjtn002,  true);
                          }
        }
        break;
      case BORDE:
        t = jj_consume_token(BORDE);
                          SimpleNode jjtn003 = new SimpleNode(JJTBORDE);
                          boolean jjtc003 = true;
                          jjtree.openNodeScope(jjtn003);
        try {
                          jjtree.closeNodeScope(jjtn003,  true);
                          jjtc003 = false;
                 jjtn003.value = t.image;
        } finally {
                          if (jjtc003) {
                            jjtree.closeNodeScope(jjtn003,  true);
                          }
        }
        break;
      case TAMFUENTE:
        t = jj_consume_token(TAMFUENTE);
                          SimpleNode jjtn004 = new SimpleNode(JJTTAMFUENTE);
                          boolean jjtc004 = true;
                          jjtree.openNodeScope(jjtn004);
        try {
                          jjtree.closeNodeScope(jjtn004,  true);
                          jjtc004 = false;
                   jjtn004.value = t.image;
        } finally {
                          if (jjtc004) {
                            jjtree.closeNodeScope(jjtn004,  true);
                          }
        }
        break;
      case FUENTE:
        t = jj_consume_token(FUENTE);
                          SimpleNode jjtn005 = new SimpleNode(JJTFUENTE);
                          boolean jjtc005 = true;
                          jjtree.openNodeScope(jjtn005);
        try {
                          jjtree.closeNodeScope(jjtn005,  true);
                          jjtc005 = false;
                 jjtn005.value = t.image;
        } finally {
                          if (jjtc005) {
                            jjtree.closeNodeScope(jjtn005,  true);
                          }
        }
        break;
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void Expresion() throws ParseException {
                    /*@bgen(jjtree) Expresion */
                     SimpleNode jjtn000 = new SimpleNode(JJTEXPRESION);
                     boolean jjtc000 = true;
                     jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case HEXCOLOR:
        t = jj_consume_token(HEXCOLOR);
                          SimpleNode jjtn001 = new SimpleNode(JJTHEXCOLOR);
                          boolean jjtc001 = true;
                          jjtree.openNodeScope(jjtn001);
        try {
                          jjtree.closeNodeScope(jjtn001,  true);
                          jjtc001 = false;
                  jjtn001.value = t.image;
        } finally {
                          if (jjtc001) {
                            jjtree.closeNodeScope(jjtn001,  true);
                          }
        }
        break;
      case TAMFUENTE:
        ExpBorde();
        break;
      case CADENA:
        t = jj_consume_token(CADENA);
                  SimpleNode jjtn002 = new SimpleNode(JJTCADENA);
                  boolean jjtc002 = true;
                  jjtree.openNodeScope(jjtn002);
        try {
                  jjtree.closeNodeScope(jjtn002,  true);
                  jjtc002 = false;
                jjtn002.value = t.image;
        } finally {
                  if (jjtc002) {
                    jjtree.closeNodeScope(jjtn002,  true);
                  }
        }
        break;
      case FUENTE:
        t = jj_consume_token(FUENTE);
                  SimpleNode jjtn003 = new SimpleNode(JJTFUENTE);
                  boolean jjtc003 = true;
                  jjtree.openNodeScope(jjtn003);
        try {
                  jjtree.closeNodeScope(jjtn003,  true);
                  jjtc003 = false;
                jjtn003.value = t.image;
        } finally {
                  if (jjtc003) {
                    jjtree.closeNodeScope(jjtn003,  true);
                  }
        }
        break;
      case TAMPX:
        t = jj_consume_token(TAMPX);
                          SimpleNode jjtn004 = new SimpleNode(JJTTAMPX);
                          boolean jjtc004 = true;
                          jjtree.openNodeScope(jjtn004);
        try {
                          jjtree.closeNodeScope(jjtn004,  true);
                          jjtc004 = false;
                 jjtn004.value = t.image;
        } finally {
                          if (jjtc004) {
                            jjtree.closeNodeScope(jjtn004,  true);
                          }
        }
        break;
      case IDENTIFICADOR:
        Concatenacion();
        break;
        Arreglo();
        break;
      case NUMERO:
        t = jj_consume_token(NUMERO);
                  SimpleNode jjtn005 = new SimpleNode(JJTNUMERO);
                  boolean jjtc005 = true;
                  jjtree.openNodeScope(jjtn005);
        try {
                  jjtree.closeNodeScope(jjtn005,  true);
                  jjtc005 = false;
                jjtn005.value = t.image;
        } finally {
                  if (jjtc005) {
                    jjtree.closeNodeScope(jjtn005,  true);
                  }
        }
        break;
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void Arreglo() throws ParseException {
                  /*@bgen(jjtree) Arreglo */
  SimpleNode jjtn000 = new SimpleNode(JJTARREGLO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CADENA:
        ArregloTipo1();
        break;
      case IDENTIFICADOR:
        ArregloTipo2();
        break;
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void ArregloTipo1() throws ParseException {
                       /*@bgen(jjtree) ArregloTipo1 */
                        SimpleNode jjtn000 = new SimpleNode(JJTARREGLOTIPO1);
                        boolean jjtc000 = true;
                        jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(CADENA);
                SimpleNode jjtn001 = new SimpleNode(JJTCADENA);
                boolean jjtc001 = true;
                jjtree.openNodeScope(jjtn001);
      try {
                jjtree.closeNodeScope(jjtn001,  true);
                jjtc001 = false;
               jjtn001.value = t.image;
      } finally {
                if (jjtc001) {
                  jjtree.closeNodeScope(jjtn001,  true);
                }
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DIVITEM:
        t = jj_consume_token(DIVITEM);
                                                                      SimpleNode jjtn002 = new SimpleNode(JJTDIVITEM);
                                                                      boolean jjtc002 = true;
                                                                      jjtree.openNodeScope(jjtn002);
        try {
                                                                      jjtree.closeNodeScope(jjtn002,  true);
                                                                      jjtc002 = false;
                                                                     jjtn002.value = t.image;
        } finally {
                                                                      if (jjtc002) {
                                                                        jjtree.closeNodeScope(jjtn002,  true);
                                                                      }
        }
        ArregloTipo1();
        break;
      default:
        jj_la1[8] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void ArregloTipo2() throws ParseException {
                       /*@bgen(jjtree) ArregloTipo2 */
                        SimpleNode jjtn000 = new SimpleNode(JJTARREGLOTIPO2);
                        boolean jjtc000 = true;
                        jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(IDENTIFICADOR);
                       SimpleNode jjtn001 = new SimpleNode(JJTIDENTIFICADOR);
                       boolean jjtc001 = true;
                       jjtree.openNodeScope(jjtn001);
      try {
                       jjtree.closeNodeScope(jjtn001,  true);
                       jjtc001 = false;
                      jjtn001.value = t.image;
      } finally {
                       if (jjtc001) {
                         jjtree.closeNodeScope(jjtn001,  true);
                       }
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DIVITEM:
        t = jj_consume_token(DIVITEM);
                                                                                    SimpleNode jjtn002 = new SimpleNode(JJTPUNTOYCOMA);
                                                                                    boolean jjtc002 = true;
                                                                                    jjtree.openNodeScope(jjtn002);
        try {
                                                                                    jjtree.closeNodeScope(jjtn002,  true);
                                                                                    jjtc002 = false;
                                                                                   jjtn002.value = t.image;
        } finally {
                                                                                    if (jjtc002) {
                                                                                      jjtree.closeNodeScope(jjtn002,  true);
                                                                                    }
        }
        ArregloTipo2();
        break;
      default:
        jj_la1[9] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void Concatenacion() throws ParseException {
                        /*@bgen(jjtree) Concatenacion */
  SimpleNode jjtn000 = new SimpleNode(JJTCONCATENACION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CADENA:
        ConcatenacionTexto();
        break;
      case IDENTIFICADOR:
        ConcatenacionId();
        break;
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void ConcatenacionTexto() throws ParseException {
                             /*@bgen(jjtree) ConcatenacionTexto */
                              SimpleNode jjtn000 = new SimpleNode(JJTCONCATENACIONTEXTO);
                              boolean jjtc000 = true;
                              jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(CADENA);
              SimpleNode jjtn001 = new SimpleNode(JJTCADENA);
              boolean jjtc001 = true;
              jjtree.openNodeScope(jjtn001);
      try {
              jjtree.closeNodeScope(jjtn001,  true);
              jjtc001 = false;
             jjtn001.value = t.image;
      } finally {
              if (jjtc001) {
                jjtree.closeNodeScope(jjtn001,  true);
              }
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CONCATENADOR:
        t = jj_consume_token(CONCATENADOR);
                                                                         SimpleNode jjtn002 = new SimpleNode(JJTCONCATENADOR);
                                                                         boolean jjtc002 = true;
                                                                         jjtree.openNodeScope(jjtn002);
        try {
                                                                         jjtree.closeNodeScope(jjtn002,  true);
                                                                         jjtc002 = false;
                                                                        jjtn002.value = t.image;
        } finally {
                                                                         if (jjtc002) {
                                                                           jjtree.closeNodeScope(jjtn002,  true);
                                                                         }
        }
        ConcatenacionTexto();
        break;
      default:
        jj_la1[11] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void ConcatenacionId() throws ParseException {
                          /*@bgen(jjtree) ConcatenacionId */
                           SimpleNode jjtn000 = new SimpleNode(JJTCONCATENACIONID);
                           boolean jjtc000 = true;
                           jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(IDENTIFICADOR);
                       SimpleNode jjtn001 = new SimpleNode(JJTIDENTIFICADOR);
                       boolean jjtc001 = true;
                       jjtree.openNodeScope(jjtn001);
      try {
                       jjtree.closeNodeScope(jjtn001,  true);
                       jjtc001 = false;
                      jjtn001.value = t.image;
      } finally {
                       if (jjtc001) {
                         jjtree.closeNodeScope(jjtn001,  true);
                       }
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CONCATENADOR:
        t = jj_consume_token(CONCATENADOR);
                                                                                           SimpleNode jjtn002 = new SimpleNode(JJTCONCATENADOR);
                                                                                           boolean jjtc002 = true;
                                                                                           jjtree.openNodeScope(jjtn002);
        try {
                                                                                           jjtree.closeNodeScope(jjtn002,  true);
                                                                                           jjtc002 = false;
                                                                                          jjtn002.value = t.image;
        } finally {
                                                                                           if (jjtc002) {
                                                                                             jjtree.closeNodeScope(jjtn002,  true);
                                                                                           }
        }
        ConcatenacionId();
        break;
      default:
        jj_la1[12] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void ExpBorde() throws ParseException {
                   /*@bgen(jjtree) ExpBorde */
                    SimpleNode jjtn000 = new SimpleNode(JJTEXPBORDE);
                    boolean jjtc000 = true;
                    jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(TAMFUENTE);
                   SimpleNode jjtn001 = new SimpleNode(JJTTAMFUENTE);
                   boolean jjtc001 = true;
                   jjtree.openNodeScope(jjtn001);
      try {
                   jjtree.closeNodeScope(jjtn001,  true);
                   jjtc001 = false;
                  jjtn001.value = t.image;
      } finally {
                   if (jjtc001) {
                     jjtree.closeNodeScope(jjtn001,  true);
                   }
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SOLID:
        jj_consume_token(SOLID);
                                                                          SimpleNode jjtn002 = new SimpleNode(JJTSOLID);
                                                                          boolean jjtc002 = true;
                                                                          jjtree.openNodeScope(jjtn002);
        try {
                                                                          jjtree.closeNodeScope(jjtn002,  true);
                                                                          jjtc002 = false;
                                                                         jjtn002.value = t.image;
        } finally {
                                                                          if (jjtc002) {
                                                                            jjtree.closeNodeScope(jjtn002,  true);
                                                                          }
        }
        break;
      default:
        jj_la1[13] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case HEXCOLOR:
        t = jj_consume_token(HEXCOLOR);
                                                                                                                                   SimpleNode jjtn003 = new SimpleNode(JJTHEXCOLOR);
                                                                                                                                   boolean jjtc003 = true;
                                                                                                                                   jjtree.openNodeScope(jjtn003);
        try {
                                                                                                                                   jjtree.closeNodeScope(jjtn003,  true);
                                                                                                                                   jjtc003 = false;
                                                                                                                                  jjtn003.value = t.image;
        } finally {
                                                                                                                                   if (jjtc003) {
                                                                                                                                     jjtree.closeNodeScope(jjtn003,  true);
                                                                                                                                   }
        }
        break;
      default:
        jj_la1[14] = jj_gen;
        ;
      }
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public CompiladorTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[15];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x3e00,0x3e00,0x3e00,0x0,0xfe0c000,0x1f0000,0x40180000,0x0,0x0,0x0,0x0,0x0,0x0,0x80000000,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x10,0x10,0x0,0x80,0x0,0x0,0x1015,0x1010,0x100,0x100,0x1010,0x40,0x40,0x0,0x1,};
   }

  /** Constructor with InputStream. */
  public Compilador(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Compilador(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new CompiladorTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 15; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 15; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Compilador(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new CompiladorTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 15; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 15; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Compilador(CompiladorTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 15; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(CompiladorTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 15; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[46];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 15; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 46; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
